import express = require('express');
import redis from './CRedis'

let that:CHttpServer

export default class CHttpServer{
    //Express应用程序
    private _app = express()
    //当前验证码
    private _VerificationCode:number = 0
    //redis对象
    private _redis = new redis()
    
    //构造函数，创建服务监听
    constructor(port: number) {
        this._app.listen(port,'0.0.0.0',() => {
            console.log('the server has been start')
        })
        that = this
    }

    //回调注册
    public listen() {
        this.get('/login',this.loginCallBack)
        this.get('/register',this.registerCallBack)
        this.get('/getCode',this.getCodeCallBack)
        this.get('/client',this.clientCallBack)
    }

    //重新封装get请求
    private get(url: string,func: Function){
        this._app.get(url,async(request,response) => {
            //设置服务响应状态码
            response.status(200)
            //设置允许跨域名访问
            response.append('Access-Control-Allow-Origin', "*")
            //执行绑定的对应响应函数
            let returnString = await func(request,response)
            //发送客户端文件不需要执行end
            if (func.name == 'clientCallBack'){
                return
            }
            if(typeof returnString == 'string'){
                response.end(returnString)
            }else{
                response.end('Return type error')
            }
        })
    }

    //重新封装post请求
    private post(url: string,func: Function){
        this._app.post(url,(request,response) => {
            func(request,response);
        })
    }

    //登录处理
    private async loginCallBack (request: express.Request,response: Response): Promise<string> {
        //url昵称参数
        let nickName = request.query.nickName
        //url密码参数
        let password = request.query.password
        if(nickName == undefined || password == undefined){
            return "User name or password cannot be empty"
        }else if(nickName == '' || password == ''){
            return "User name or password cannot be empty"
        }else if(await that._redis.checkNickNameIsExistence(nickName) == 0){
            return "User name does not exist"
        }else{
            //通过昵称获取玩家索引
            let id = Number(await that._redis.getUserId(nickName)).toString()
            //通过玩家索引获取玩家信息
            let userInfo = await that._redis.getUserInfo(id)
            console.log(userInfo)
            if(userInfo['password'] == password){
                return "Login was successful"
            }else{
                return "Password error"
            }
        }
    }

    //注册处理
    private async registerCallBack(request: express.Request,response: Response) {
        //url 昵称参数
        let nickname = request.query.nickname
        //url 密码参数
        let password = request.query.password
        //url 验证码参数
        let verCode = request.query.VerificationCode
        if(nickname == undefined || password == undefined){
            return "Nickname or password cannot be empty"
        }else if(password == '' || password == ''){
            return "Nickname or password cannot be empty"
        }else if(Number(verCode) != Number(that._VerificationCode)){
            return "VerificationCode error"
        }else if(await that._redis.checkNickNameIsExistence(nickname) != 0){
            return "User name has exist"
        }
        else{
            //将注册的玩家信息写入redis
            await that._redis.addUserInfo(nickname,password,'null')
            return "Register was successful"
        }
    }
    
    //获取验证码处理
    private  getCodeCallBack(request: Request,response: Response){
        console.log('getCode')
        //随机数字赋值给验证码
        that._VerificationCode = Math.floor(Math.random() * 10000)
        return that._VerificationCode.toString()
    }
    
    //发送注册客户端文件
    private clientCallBack(request: Request,response: express.Response){
        response.sendFile("/Server/view/register.htm")
        //response.sendFile("C:/Users/Administrator/Desktop/login/view/register.htm")
    }
}